searchState.loadedDescShard("spinoso_regexp", 0, "Error that indicates an argument parsing or value logic …\nError that indicates an argument parsing or value logic …\nA <code>Config</code> represents the parsed, expanded, and normalized …\nAn iterator that yields a debug representation of a <code>Regexp</code> …\nEngine feature is disabled.\nEngine feature is disabled.\nThe encoding of a Regexp literal.\nSum type of all errors possibly returned from <code>Regexp</code> APIs.\nThe highest group matched by the last successful match.\nThe information about the last match in the current scope.\nThe string matched by the last successful match.\nConfiguration options for Ruby Regexps.\nError that indicates a <code>Regexp</code> was malformed at runtime.\nError that indicates a <code>Regexp</code> was malformed at runtime.\nThe state of a Regexp engine flag in <code>Options</code>.\nThe string to the left of the last successful match.\nThe string to the right of the last successful match.\nA <code>Source</code> represents the literal contents used to construct …\nContainer for Ruby VM-level Regexp engine state.\nError that indicates a given <code>Regexp</code> pattern could not be …\nError that indicates a given <code>Regexp</code> pattern could not be …\nGet a flags value with all known bits set.\nSerialize the option flags to a string suitable for a …\nSerialize the option flags to a string suitable for …\nSerialize the encoding flags to a string suitable for a …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe number of captures for a match of <code>haystack</code> against …\nRetrieve the count of currently active <code>Regexp</code> capture …\nErrors\nReturns the number of captures.\nReset the state to empty.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nCreate a disabled <code>RegexpOption</code>.\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nReturn the 0th capture group if <code>haystack</code> is matched by …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nWhether these <code>Options</code> are configured for extended mode with\nConvert an <code>Encoding</code> to its bit flag representation.\nConvert an <code>Options</code> to its bit flag representation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from <code>bool</code> to its <code>RegexpOption</code> representation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTruncate the given <code>i64</code> to one byte and generate flags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert an <code>Encoding</code> to its bit flag representation.\nConvert an <code>Encoding</code> to its bit flag representation.\nConvert an <code>Options</code> to its bit flag representation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nWhether these <code>Options</code> are configured for case-insensitive …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an <code>Encoding</code> to its bit representation.\nConvert an <code>Options</code> to its bit representation.\nWhether all known bits in this flags value are set.\nWhether this source was parsed with ignore case enabled.\nWhether all bits in this flags value are unset.\nReturn whether this option is enabled.\nWhether the Regexp was parsed as a literal, e.g. …\nWhether the Regexp was parsed as a literal, e.g. …\nCheck whether this regexp matches the given haystack …\nYield a set of contained flags values.\nYield a set of contained named flags values.\nRetrieve the exception message associated with this …\nRetrieve the exception message associated with this regexp …\nRetrieve the exception message associated with this syntax …\nWhether these <code>Options</code> are configured for multiline mode.\nReturns a hash representing information about the named …\nErrors\nConstruct a new <code>Debug</code> iterator with a regexp source, …\nConstructs a new, default <code>InvalidEncodingError</code>.\nConstruct a new <code>None</code> encoding.\nConstruct a new, default argument error.\nConstruct a new, default regexp error.\nConstruct a new, default syntax error.\nConstruct a new, disabled <code>RegexpOption</code>.\nConstructs a new, default <code>Options</code>.\nConstructs a new, empty <code>Regexp</code> state.\nConstruct a new, empty <code>Source</code>.\nConstruct a new, empty <code>Config</code>.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nGlobal variable name for the nth capture group from a …\nGlobal variable name for the nth capture group from a …\nReturn a copy of the underlying <code>Options</code>.\nReturn a copy of the underlying <code>Options</code>.\nExtracts a slice containing the entire pattern.\nExtracts a slice containing the entire pattern.\nErrors\nThe intersection of a source flags value with the …\nInserts or removes the specified flags depending on the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet the count of currently active <code>Regexp</code> capture group …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTry to parse an <code>Options</code> from a full-width <code>i64</code>.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nAn options instance that has only case insensitive mode …\nConstruct a Regexp with a UTF-8 <code>regex</code> backend.\nConstruct a new argument error with a message.\nConstruct a new regexp error with a message.\nConstruct a new syntax error with a message.\nConstruct a new <code>Source</code> with the given pattern and <code>Options</code>.\nConstruct a new <code>Config</code> with the given pattern and <code>Options</code>.")