[package]
name = "artichoke"
version = "0.1.0-pre.0"
authors = ["Ryan Lopopolo <rjl@hyperbo.la>"]
license = "MIT"
edition = "2018"
readme = "README.md"
repository = "https://github.com/artichoke/artichoke"
documentation = "https://artichoke.github.io/artichoke/artichoke/"
homepage = "https://github.com/artichoke/artichoke"
description = """
artichoke is a Ruby 2.6.3 implementation. Artichoke supports embedding and
conditional compilation of the VM and standard library. Artichoke can be used to
distribute Ruby applications as single-binary artifacts. Artichoke builds on
Windows, macOS, and Linux, as well as WebAssembly via Emscripten.
"""
keywords = ["artichoke", "artichoke-ruby", "mri", "cruby", "ruby"]
categories = ["command-line-utilities"]

[dependencies]
rustyline = { version = "7", default-features = false, optional = true }
structopt = { version = "0.3", optional = true }
termcolor = { version = "1.1", optional = true }

[dependencies.artichoke-backend]
version = "0.1"
path = "artichoke-backend"
default-features = false

[build-dependencies]
chrono = { version = "0.4.19", default-features = false, features = ["clock"] }
target-lexicon = "0.11.1"

[[bin]]
name = "airb"
path = "src/bin/airb.rs"
required-features = ["cli"]

[[bin]]
name = "artichoke"
path = "src/bin/artichoke.rs"
required-features = ["cli"]

[workspace]
members = [
  "artichoke-backend",
  "artichoke-core",
  "scolapasta-hex",
  "scolapasta-string-escape",
  "spinoso-array",
  "spinoso-env",
  "spinoso-exception",
  "spinoso-math",
  "spinoso-random",
  "spinoso-securerandom",
  "spinoso-symbol",
  "spinoso-time",
]

[profile.release]
codegen-units = 1
lto = true

[features]
default = [
  "cli",
  "core-env",
  "core-env-system",
  "core-math",
  "core-math-full",
  "core-random",
  "core-regexp-oniguruma",
  "core-time",
  "native-filesystem-access",
  "stdlib-securerandom"
]
cli = ["rustyline", "structopt", "termcolor"]
# Enable resolving environment variables with the `ENV` core object.
core-env = ["artichoke-backend/core-env"]
# Enable resolving environment variables with the `ENV` core object using native
# OS APIs. This feature replaces the in-memory backend with `std::env`.
core-env-system = ["core-env", "artichoke-backend/core-env-system"]
# Enable the `Math` module in Ruby Core.
core-math = ["artichoke-backend/core-math"]
# Enable an extra dependency on `libm` to implement some `Math` core APIs for
# functions not present in `std`.
core-math-full = ["core-math", "artichoke-backend/core-math-full"]
# Implement the `Random` core class and add an interpreter-default PRNG to
# Artichoke. This feature adds dependencies on `rand_core` and `rand_pcg`.
core-random = ["artichoke-backend/core-random"]
# Enable an oniguruma engine backend to the `Regexp` core class. With this
# feature, Regexp patterns must be parsable by oniguruma regardless of the
# backend they execute on. The `regex` crate backend remains the default as long
# as it can parse the given pattern.
core-regexp-oniguruma = ["artichoke-backend/core-regexp-oniguruma"]
# Implement the `Time` core class. This feature adds dependencies on `chrono`
# and `chrono-tz`.
core-time = ["artichoke-backend/core-time"]
# Extend the Artichoke virtual filesystem to have native/host access.
# This feature enables requiring sources from local disk.
native-filesystem-access = ["artichoke-backend/native-filesystem-access"]
# Override the `stdout` and `stdin` streams to write to an in-memory buffer.
output-strategy-capture = ["artichoke-backend/output-strategy-capture"]
# Override the `stdout` and `stdin` streams to write to be discarded.
# `output-strategy-null` implies the `output-strategy-capture` feature.
output-strategy-null = ["artichoke-backend/output-strategy-null"]
# Implement the `SecureRandom` Standard Library package. This feature adds
# dependencies on `base64`, `hex`, `rand`, `rand_core`, and `uuid`.
stdlib-securerandom = ["artichoke-backend/stdlib-securerandom"]

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]
