---
name: CI
"on":
  push:
    branches:
      - trunk
  pull_request:
    branches:
      - trunk
  schedule:
    - cron: "0 0 * * TUE"
env:
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    env:
      RUSTFLAGS: -D warnings
      RUST_BACKTRACE: 1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Install Rust toolchain
        uses: artichoke/setup-rust/build-and-test@v1.12.1
        with:
          toolchain: "1.76.0"

      - name: Compile
        run: cargo build --workspace --verbose

      - name: Compile tests
        run: cargo test --workspace --no-run

      - name: Test
        run: cargo test --workspace

  check-artichoke:
    name: Check artichoke workspace
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -D warnings
      RUST_BACKTRACE: 1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Install Rust toolchain
        uses: artichoke/setup-rust/lint-and-format@v1.12.1
        with:
          toolchain: "1.76.0"

      - name: Check artichoke formatting
        run: cargo +nightly fmt --check

      - name: Lint artichoke with Clippy
        run: cargo clippy --workspace --all-features --all-targets

      - name: Check artichoke with locked Cargo.lock
        run: cargo check --locked --all-targets --profile=test

      - name: Check artichoke with no default features
        run: cargo check --verbose --no-default-features --all-targets --profile=test

      - name: Check artichoke with all features
        run: cargo check --verbose --all-features --all-targets --profile=test

      - name: Check artichoke with no default features and native fs access
        run: cargo build --no-default-features --features load-path-native-file-system-loader

  check-fuzz:
    name: Check fuzz workspace
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -D warnings
      RUST_BACKTRACE: 1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Install Rust toolchain
        uses: artichoke/setup-rust/lint-and-format@v1.12.1
        with:
          toolchain: "1.76.0"

      - name: Check fuzz formatting
        run: cargo +nightly fmt --check
        working-directory: "fuzz"

      - name: Check fuzz with locked Cargo.lock
        run: cargo check --locked --all-targets --profile=test
        working-directory: "fuzz"

  check-spec-runner:
    name: Check spec-runner workspace
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -D warnings
      RUST_BACKTRACE: 1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Install Rust toolchain
        uses: artichoke/setup-rust/lint-and-format@v1.12.1
        with:
          toolchain: "1.76.0"

      - name: Check spec-runner formatting
        run: cargo +nightly fmt --check
        working-directory: "spec-runner"

      - name: Check spec-runner with locked Cargo.lock
        run: cargo check --locked --all-targets --profile=test
        working-directory: "spec-runner"

      - name: Test spec-runner
        run: cargo test
        working-directory: "spec-runner"

      - name: Lint spec-runner with Clippy
        run: cargo clippy --workspace --all-features --all-targets
        working-directory: "spec-runner"

  check-ui-tests:
    name: Check ui-tests workspace
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -D warnings
      RUST_BACKTRACE: 1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Install Rust toolchain
        uses: artichoke/setup-rust/lint-and-format@v1.12.1
        with:
          toolchain: "1.76.0"

      - name: Check ui-tests formatting
        run: cargo +nightly fmt --check
        working-directory: "ui-tests"

      - name: Check ui-tests with locked Cargo.lock
        run: cargo check --locked --all-targets --profile=test
        working-directory: "ui-tests"

      - name: Lint ui-tests with Clippy
        run: cargo clippy --workspace --all-features --all-targets
        working-directory: "ui-tests"

      - name: Build artichoke binaries
        run: cargo build

      - name: Build ui test suite
        run: cargo test --workspace --no-run
        working-directory: "ui-tests"

      - name: Run ui test suite
        run: cargo test
        working-directory: "ui-tests"

  check-sub-crates:
    name: Check spinoso and scolapasta crates
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -D warnings
      RUST_BACKTRACE: 1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Install Rust toolchain
        uses: artichoke/setup-rust/build-and-test@v1.12.1
        with:
          toolchain: "1.76.0"

      - name: Check artichoke-load-path with no default features
        run: cargo check --verbose --no-default-features --all-targets --profile=test
        working-directory: "artichoke-load-path"

      - name: Check artichoke-load-path with all features
        run: cargo check --verbose --all-features --all-targets --profile=test
        working-directory: "artichoke-load-path"

      - name: Check mezzaluna-load-path with no default features
        run: cargo check --verbose --no-default-features --all-targets --profile=test
        working-directory: "mezzaluna-load-path"

      - name: Check mezzaluna-load-path with all features
        run: cargo check --verbose --all-features --all-targets --profile=test
        working-directory: "mezzaluna-load-path"

      - name: Check mezzaluna-loaded-features with no default features
        run: cargo check --verbose --no-default-features --all-targets --profile=test
        working-directory: "mezzaluna-loaded-features"

      - name: Check mezzaluna-loaded-features with all features
        run: cargo check --verbose --all-features --all-targets --profile=test
        working-directory: "mezzaluna-loaded-features"

      - name: Check mezzaluna-type-registry with no default features
        run: cargo check --verbose --no-default-features --all-targets --profile=test
        working-directory: "mezzaluna-type-registry"

      - name: Check mezzaluna-type-registry with all features
        run: cargo check --verbose --all-features --all-targets --profile=test
        working-directory: "mezzaluna-type-registry"

      - name: Check spinoso-array with no default features
        run: cargo check --verbose --no-default-features --all-targets --profile=test
        working-directory: "spinoso-array"

      - name: Check spinoso-array with all features
        run: cargo check --verbose --all-features --all-targets --profile=test
        working-directory: "spinoso-array"

      - name: Check spinoso-env with no default features
        run: cargo check --verbose --no-default-features --all-targets --profile=test
        working-directory: "spinoso-env"

      - name: Check spinoso-env with all features
        run: cargo check --verbose --all-features --all-targets --profile=test
        working-directory: "spinoso-env"

      - name: Check spinoso-exception with no default features
        run: cargo check --verbose --no-default-features --all-targets --profile=test
        working-directory: "spinoso-exception"

      - name: Check spinoso-exception with all features
        run: cargo check --verbose --all-features --all-targets --profile=test
        working-directory: "spinoso-exception"

      - name: Check spinoso-math with no default features
        run: cargo check --verbose --no-default-features --all-targets --profile=test
        working-directory: "spinoso-math"

      - name: Check spinoso-math with all features
        run: cargo check --verbose --all-features --all-targets --profile=test
        working-directory: "spinoso-math"

      - name: Check spinoso-random with no default features
        run: cargo check --verbose --no-default-features --all-targets --profile=test
        working-directory: "spinoso-random"

      - name: Check spinoso-random with all features
        run: cargo check --verbose --all-features --all-targets --profile=test
        working-directory: "spinoso-random"

      - name: Check spinoso-random with some features
        run: |
          cargo check --verbose --no-default-features --features rand_core --all-targets --profile=test
          cargo check --verbose --no-default-features --features std --all-targets --profile=test
          cargo check --verbose --no-default-features --features rand-method --all-targets --profile=test
        working-directory: "spinoso-random"

      - name: Check spinoso-regexp with no default features
        run: cargo check --verbose --no-default-features --all-targets --profile=test
        working-directory: "spinoso-regexp"

      - name: Check spinoso-regexp with all features
        run: cargo check --verbose --all-features --all-targets --profile=test
        working-directory: "spinoso-regexp"

      - name: Check spinoso-securerandom with no default features
        run: cargo check --verbose --no-default-features --all-targets --profile=test
        working-directory: "spinoso-securerandom"

      - name: Check spinoso-securerandom with all features
        run: cargo check --verbose --all-features --all-targets --profile=test
        working-directory: "spinoso-securerandom"

      - name: Check spinoso-string with no default features
        run: cargo check --verbose --no-default-features --all-targets --profile=test
        working-directory: "spinoso-string"

      - name: Check spinoso-string with all features
        run: cargo check --verbose --all-features --all-targets --profile=test
        working-directory: "spinoso-string"

      - name: Check spinoso-symbol with no default features
        run: cargo check --verbose --no-default-features --all-targets --profile=test
        working-directory: "spinoso-symbol"

      - name: Check spinoso-symbol with all features
        run: cargo check --verbose --all-features --all-targets --profile=test
        working-directory: "spinoso-symbol"

      - name: Compile spinoso-symbol with some features
        run: |
          cargo check --verbose --no-default-features --features ident-parser --all-targets --profile=test
          cargo check --verbose --no-default-features --features inspect --all-targets --profile=test
          cargo check --verbose --no-default-features --features inspect,artichoke --all-targets --profile=test
        working-directory: "spinoso-symbol"

      - name: Check spinoso-time with no default features
        run: cargo check --verbose --no-default-features --all-targets --profile=test
        working-directory: "spinoso-time"

      - name: Check spinoso-time with all features
        run: cargo check --verbose --all-features --all-targets --profile=test
        working-directory: "spinoso-time"

      - name: Compile scolapasta-aref with no default features
        run: cargo check --verbose --no-default-features --all-targets --profile=test
        working-directory: "scolapasta-aref"

      - name: Compile scolapasta-aref with all features
        run: cargo check --verbose --all-features --all-targets --profile=test
        working-directory: "scolapasta-aref"

      - name: Compile scolapasta-fixable with no default features
        run: cargo check --verbose --no-default-features --all-targets --profile=test
        working-directory: "scolapasta-fixable"

      - name: Compile scolapasta-fixable with all features
        run: cargo check --verbose --all-features --all-targets --profile=test
        working-directory: "scolapasta-fixable"

      - name: Compile scolapasta-hex with no default features
        run: cargo check --verbose --no-default-features --all-targets --profile=test
        working-directory: "scolapasta-hex"

      - name: Compile scolapasta-hex with all features
        run: cargo check --verbose --all-features --all-targets --profile=test
        working-directory: "scolapasta-hex"

      - name: Compile scolapasta-hex with some features
        run: |
          cargo check --verbose --no-default-features --features alloc --all-targets --profile=test
          cargo check --verbose --no-default-features --features alloc,std --all-targets --profile=test
        working-directory: "scolapasta-hex"

      - name: Compile scolapasta-int-parse with no default features
        run: cargo check --verbose --no-default-features --all-targets --profile=test
        working-directory: "scolapasta-int-parse"

      - name: Compile scolapasta-int-parse with all features
        run: cargo check --verbose --all-features --all-targets --profile=test
        working-directory: "scolapasta-int-parse"

      - name: Compile scolapasta-path with no default features
        run: cargo check --verbose --no-default-features --all-targets --profile=test
        working-directory: "scolapasta-path"

      - name: Compile scolapasta-path with all features
        run: cargo check --verbose --all-features --all-targets --profile=test
        working-directory: "scolapasta-path"

      - name: Compile scolapasta-strbuf with no default features
        run: cargo check --verbose --no-default-features --all-targets --profile=test
        working-directory: "scolapasta-strbuf"

      - name: Compile scolapasta-strbuf with some features
        run: cargo check --verbose --no-default-features --features nul-terminated --all-targets --profile=test
        working-directory: "scolapasta-strbuf"

      - name: Compile scolapasta-strbuf with all features
        run: cargo check --verbose --all-features --all-targets --profile=test
        working-directory: "scolapasta-strbuf"

      - name: Compile scolapasta-string-escape with no default features
        run: cargo check --verbose --no-default-features --all-targets --profile=test
        working-directory: "scolapasta-string-escape"

      - name: Compile scolapasta-string-escape with all features
        run: cargo check --verbose --all-features --all-targets --profile=test
        working-directory: "scolapasta-string-escape"

  rust-minimal-versions:
    name: Compile with minimum dependency versions
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -D warnings
      RUST_BACKTRACE: 1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Install Rust toolchain
        uses: artichoke/setup-rust/check-minimal-versions@v1.12.1
        with:
          toolchain: "1.76.0"

      - name: Generate minimal versions lockfile in root workspace
        run: cargo +nightly generate-lockfile -Z minimal-versions

      - name: Check with minimal versions in root workspace
        run: cargo check --all-targets --profile=test

      - name: Generate minimal versions lockfile in spec-runner workspace
        run: cargo +nightly generate-lockfile -Z minimal-versions
        working-directory: "spec-runner"

      - name: Check with minimal versions in spec-runner workspace
        run: cargo check --all-targets --profile=test
        working-directory: "spec-runner"

  ruby:
    name: Lint and format Ruby
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Install Ruby toolchain
        uses: ruby/setup-ruby@7d3497fd78c07c0d84ebafa58d8dac60cd1f0763 # v1.199.0
        with:
          ruby-version: ".ruby-version"
          bundler-cache: true

      - name: Lint and check formatting with Rubocop
        run: bundle exec rubocop --format github

  c:
    name: Lint and format C
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Setup Node.js runtime
        uses: actions/setup-node@v4.1.0
        with:
          node-version: "lts/*"

      - name: Install toolchain
        run: npm ci

      - name: Lint and check formatting with clang-format
        run: npm run fmt:c -- --check

  text:
    name: Lint and format text
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Setup Node.js runtime
        uses: actions/setup-node@v4.1.0
        with:
          node-version: "lts/*"

      - name: Install toolchain
        run: npm ci

      - name: Lint and check formatting with prettier
        run: npx prettier --check '**/*'

      - name: Lint YAML sources with yamllint
        run: |
          yamllint --version
          echo "Linting YAML sources with yamllint ..."
          yamllint --strict --format github .
          echo "OK"
