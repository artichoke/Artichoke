[package]
name = "spinoso-string"
version = "0.26.0"
authors = ["Ryan Lopopolo <rjl@hyperbo.la>"]
description = """
Encoding-aware string implementation for Ruby String core type in Artichoke Ruby
"""
keywords = ["encoding", "no_std", "spinoso", "string", "utf8"]
categories = ["data-structures", "encoding", "no-std"]
readme = "README.md"
edition.workspace = true
rust-version.workspace = true
license.workspace = true
repository.workspace = true
homepage.workspace = true
documentation.workspace = true

[dependencies]
bytecount = "0.6.2"

[dependencies.bstr]
version = "1.2.0"
default-features = false
features = ["alloc"]

[dependencies.focaccia]
version = "1.3.1"
optional = true
default-features = false

[dependencies.scolapasta-strbuf]
version = "1.0.0"
path = "../scolapasta-strbuf"
default-features = false

[dependencies.scolapasta-string-escape]
version = "0.3.0"
path = "../scolapasta-string-escape"
default-features = false

[dependencies.simdutf8]
version = "0.1.4"
default-features = false

[dev-dependencies]
arbitrary = "1.4.1"
getrandom = "0.3.0"

[features]
default = ["casecmp", "std"]
casecmp = ["dep:focaccia"]
# Enable implementations of traits in `std` like `Error` and `io::Write`.
#
# Enable runtime SIMD dispatch in `bytecount` and `simdutf8` dependencies.
std = [
    "bytecount/runtime-dispatch-simd",
    "scolapasta-strbuf/std",
    "simdutf8/std",
]
# Use an alternate byte buffer backend that ensures byte content is always
# followed by a NUL byte in the buffer's spare capacity. This feature can be
# used to ensure `String`s are FFI compatible with C code that expects byte
# content to be NUL terminated.
nul-terminated = ["scolapasta-strbuf/nul-terminated"]

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]
