[package]
name = "spinoso-string"
version = "0.20.0"
authors = ["Ryan Lopopolo <rjl@hyperbo.la>"]
edition = "2021"
rust-version = "1.63.0"
description = """
Encoding-aware string implementation for Ruby String core type in Artichoke Ruby
"""
repository = "https://github.com/artichoke/artichoke"
readme = "README.md"
license = "MIT"
keywords = ["encoding", "no_std", "spinoso", "string", "utf8"]
categories = ["data-structures", "encoding", "no-std"]

[dependencies]
bstr = { version = "0.2.9", default-features = false, features = ["std"] }
bytecount = "0.6.2"
focaccia = { version = "1.2.0", optional = true, default-features = false }
raw-parts = "1.1.1"
scolapasta-string-escape = { version = "0.3.0", path = "../scolapasta-string-escape", default-features = false }
simdutf8 = { version = "0.1.4", default-features = false }

[dev-dependencies]
quickcheck = { version = "1.0.3", default-features = false }

[features]
default = ["casecmp", "std"]
casecmp = ["focaccia"]
# Enable implementations of traits in `std` like `Error` and `io::Write`.
#
# Enable runtime SIMD dispatch in `bytecount` and `simdutf8` dependencies.
std = ["bytecount/runtime-dispatch-simd", "simdutf8/std"]
# Use an alternate byte buffer backend that ensures string content is always
# followed by a NUL byte. This feature can be used to ensure spinoso strings are
# FFI compatible with C code that expects byte content to be NUL terminated.
always-nul-terminated-c-string-compat = []

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]
